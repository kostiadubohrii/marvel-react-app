{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelServices.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js","components/charList/CharList.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/pages/MainPage.js"],"names":["ErrorMessage","src","img","alt","style","display","width","height","objectFit","margin","useMarvelService","useState","loading","setLoading","error","setError","process","setProcess","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","message","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacter","id","getAllComics","_transformComics","getComic","char","name","description","thumbnail","path","extension","homepage","urls","wiki","comics","items","title","price","prices","pageCount","language","textObjects","Skeleton","className","setContent","Component","Spinner","newItemLoading","CharList","props","charList","setCharList","setNewItemLoading","setOffset","charEnded","setCharEnded","useEffect","onRequest","initial","then","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","renderItems","arr","item","i","imgStyle","tabIndex","ref","el","current","onClick","onCharSelected","forEach","classList","remove","add","focus","disabled","View","href","RandomChar","setChar","updateChar","timerId","setInterval","clearInterval","onCharLoaded","Math","floor","random","mjolnir","homapage","isComics","substring","itemId","resourceURI","slice","to","CharInfo","charId","ErrorBoundary","state","errorInfo","this","setState","children","MainPage","selectedChar","decoration"],"mappings":"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","file":"static/js/4.026f9e66.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img src={img} alt=\"Error\" style={{\r\n            display: 'block',\r\n            width: '250px',\r\n            height: '250px',\r\n            objectFit: 'contain',\r\n            margin: '0 auto'\r\n        }}/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\n\r\nconst useMarvelService = () => {\r\n    const {loading, request, error, clearError, process, setProcess} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=6fd94479de2fe9e956aa6ece53614a9c';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n\t\tconst res = await request(\r\n\t\t\t`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\r\n\t\t);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t};\r\n\r\n\tconst getCharacter = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n\t\treturn _transformCharacter(res.data.results[0]);\r\n\t};\r\n\r\n\tconst getAllComics = async (offset = 0) => {\r\n\t\tconst res = await request(\r\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n\t\t);\r\n\t\treturn res.data.results.map(_transformComics);\r\n\t};\r\n\r\n\tconst getComic = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t};\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: !char.description ? \"This hero doesn't have description\" : char.description,\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items,\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || \"No description\",\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            price: comics.prices[0].price\r\n                    ? `${comics.prices[0].price}$`\r\n                    : \"not available\",\r\n            pageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n            language: comics.textObjects[0]?.language || \"en-us\",\r\n        }\r\n    }\r\n\r\n    return {\r\n        loading, \r\n        error, \r\n        process,\r\n        getAllCharacters, \r\n        getCharacter, \r\n        clearError, \r\n        getAllComics, \r\n        getComic,\r\n        setProcess\r\n    };\r\n}\r\n\r\nexport default useMarvelService;","import {useState, useCallback } from 'react'\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false),\r\n          [error, setError] = useState(null),\r\n          [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers={'Content-Type': 'application/json'}) => {\r\n        setLoading(true); // Спочатку завантаження ставиться true. Тобто ми проводимо анімацію завантаження. \r\n        setProcess('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false); // Тут закінчуємо анімацію завантаження.\r\n            setProcess('confirmed');\r\n            return data;\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setProcess('error');\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => {\r\n        setError(null);\r\n        setProcess('loading');\r\n    }, []);\r\n    \r\n    return {loading, request, error, clearError, process, setProcess}\r\n}","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n    return (\r\n        <>\r\n            <p className=\"char__select\">Please select a character to see information</p>\r\n            <div className=\"skeleton\">\r\n                <div className=\"pulse skeleton__header\">\r\n                    <div className=\"pulse skeleton__circle\"></div>\r\n                    <div className=\"pulse skeleton__mini\"></div>\r\n                </div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Skeleton/>;\r\n            break;\r\n        case 'loading':\r\n            return <Spinner/>;\r\n            break;\r\n        case 'confirmed':\r\n            return <Component data={data}/>;\r\n            break;\r\n        case 'error':\r\n            return <ErrorMessage/>;\r\n            break;\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nexport default setContent;","import {useState, useEffect, useRef} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport useMarvelService from '../../services/MarvelServices';\r\nimport './charList.scss';\r\n\r\n// import setContent from '../../utils/setContent';\r\n\r\nconst setContent = (process, Component, newItemLoading) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Spinner/>;\r\n            break;\r\n        case 'loading':\r\n            return newItemLoading ? <Component/> : <Spinner/>;\r\n            break;\r\n        case 'confirmed':\r\n            return <Component/>;\r\n            break;\r\n        case 'error':\r\n            return <ErrorMessage/>;\r\n            break;\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nconst CharList = (props) => {    \r\n\r\n    const [charList, setCharList] = useState([]),\r\n          [newItemLoading, setNewItemLoading] = useState(false),\r\n          [offset, setOffset] = useState(210),\r\n          [charEnded, setCharEnded] = useState(false);\r\n\r\n    const {getAllCharacters, process, setProcess} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        onRequest(offset, true);\r\n    }, [])\r\n\r\n    const onRequest = (offset, initial) => {\r\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n        getAllCharacters(offset)\r\n            .then(onCharListLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n    \r\n\r\n    const onCharListLoaded = (newCharList) => {\r\n        let ended = false;\r\n\r\n        if (newCharList.length < 9) {\r\n            ended = true\r\n        }\r\n\r\n        setCharList(charList => [...charList, ...newCharList]);\r\n        setNewItemLoading(newItemLoading => false);\r\n        setOffset(offset => offset + 9);\r\n        setCharEnded(charEnded => ended);\r\n\r\n    }\r\n\r\n    const itemRefs = useRef([]);\r\n\r\n    const onCharClick = id => {\r\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\r\n        itemRefs.current[id].classList.add('char__item_selected');\r\n        itemRefs.current[id].focus();\r\n    }\r\n\r\n  \r\n    function renderItems(arr) {\r\n        const items =  arr.map((item, i) => {\r\n            let imgStyle = {'objectFit' : 'cover'};\r\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n                imgStyle = {'objectFit' : 'unset'};\r\n            }\r\n            return (\r\n                <li \r\n                    className=\"char__item\"\r\n                    tabIndex={0}\r\n                    ref={el => itemRefs.current[i] = el}\r\n                    key={item.id}\r\n                    onClick={() => {\r\n                        props.onCharSelected(item.id);\r\n                        onCharClick(i)\r\n                    }}\r\n                    // onKeyPress={(e) => {\r\n                    //     if (e.key === ' ' || e.key === \"Enter\") {\r\n                    //         props.onCharSelected(item.id);\r\n                    //         focusOnItem(i);\r\n                    //     }\r\n                    // }}\r\n                    >\r\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\r\n                        <div className=\"char__name\">{item.name}</div>\r\n                </li>\r\n            )\r\n        });\r\n\r\n        return (\r\n            <ul className=\"char__grid\">\r\n                {items}\r\n            </ul>\r\n        )\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"char__list\">\r\n            {setContent(process, () => renderItems(charList), newItemLoading)}\r\n            <button \r\n                className=\"button button__main button__long\"\r\n                disabled={newItemLoading}\r\n                style={{'display' : charEnded ? 'none': 'block'}}\r\n                onClick={() => onRequest(offset)}\r\n                >\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nCharList.propTypes = {\r\n    onCharSelected: PropTypes.func.isRequired\r\n};\r\n\r\nexport default CharList;","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import {useEffect, useState } from 'react';\r\nimport useMarvelService from '../../services/MarvelServices';\r\n\r\nimport './randomChar.scss';\r\nimport mjolnir from '../../resources/img/mjolnir.png';\r\nimport setContent from '../../utils/setContent';\r\n\r\nconst RandomChar = (props) => {\r\n\r\n    const [char, setChar] = useState({});\r\n\r\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n        const timerId = setInterval(updateChar, 60000)\r\n\r\n        return () => {\r\n            clearInterval(timerId)\r\n        }\r\n    }, [])\r\n    \r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = () => {\r\n        clearError();\r\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\r\n        getCharacter(id)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    return (\r\n        <div className=\"randomchar\">\r\n            {setContent(process, View, char)}\r\n            <div className=\"randomchar__static\">\r\n                <p className=\"randomchar__title\">\r\n                    Random character for today!<br/>\r\n                    Do you want to get to know him better?\r\n                </p>\r\n                <p className=\"randomchar__title\">\r\n                    Or choose another one\r\n                </p>\r\n                <button onClick={updateChar} className=\"button button__main\" >\r\n                    <div className=\"inner\">try it</div>\r\n                </button>\r\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst View = ({data}) => {\r\n    const {name, description, thumbnail, homepage, wiki} = data;\r\n    let imgStyle = {'objectFit': 'cover'};\r\n\r\n    if (thumbnail=== 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n        imgStyle = {'objectFit': 'contain'};\r\n    }\r\n\r\n    return (\r\n\r\n        \r\n        <div className=\"randomchar__block\">\r\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle} />\r\n            <div className=\"randomchar__info\">\r\n                <p className=\"randomchar__name\">{name}</p>\r\n                <p className=\"randomchar__descr\">\r\n                    {description}\r\n                </p>\r\n                <div className=\"randomchar__btns\">\r\n                    <a href={homepage} className=\"button button__main\">\r\n                        <div className=\"inner\">homepage</div>\r\n                    </a>\r\n                    <a href={wiki} className=\"button button__secondary\">\r\n                        <div className=\"inner\">Wiki</div>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RandomChar;","import {useEffect, useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelServices';\r\nimport './charInfo.scss';\r\n\r\nimport setContent from '../../utils/setContent';\r\n\r\n\r\nconst CharInfo = (props) => {\r\n\r\n    const [char, setChar] = useState(null);\r\n    \r\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\r\n\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n    }, [props.charId]);\r\n\r\n    const updateChar = () => {\r\n        const {charId} = props;\r\n        if (!charId) {\r\n            return;\r\n        }\r\n        clearError();\r\n        getCharacter(charId)\r\n            .then(onCharListLoaded)\r\n            .then(() => setProcess('confirmed')) // We set the state of the process as confiemed due to the end of the process, so when charListloaded finished, we set the process as confirmed\r\n\r\n    }\r\n\r\n    const onCharListLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    return (\r\n        <div className=\"char__info\">\r\n            {setContent(process, View, char)}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst View = ({data}) => {\r\n    const {name, description, thumbnail, homapage, wiki, comics } = data;\r\n\r\n    const isComics = comics.length === 0 ? \"This here has never been seen in comics\" : null;\r\n\r\n    let imgStyle = {'objectFit': 'cover'};\r\n\r\n    if (thumbnail.substring(44) === 'image_not_available.jpg') {\r\n        imgStyle = {'objectFit': 'contain'};\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div className=\"char__basics\">\r\n            <img src={thumbnail} alt={name} style={imgStyle}/>\r\n            <div>\r\n                <div className=\"char__info-name\">{name}</div>\r\n                <div className=\"char__btns\">\r\n                    <a href={homapage} className=\"button button__main\">\r\n                        <div className=\"inner\">Homapage</div>\r\n                    </a>\r\n                    <a href={wiki} className=\"button button__secondary\">\r\n                        <div className=\"inner\">Wiki</div>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"char__descr\">\r\n            {description}\r\n        </div>\r\n        <div className=\"char__comics\">Comics:</div>\r\n        <ul className=\"char__comics-list\">\r\n            {   \r\n                comics.map((item, i) => {\r\n                    if (i < 9 && i >= 0) {\r\n                        const itemId = item.resourceURI.slice(43);\r\n                        return (\r\n                            <Link to={`/comics/${itemId}`} className=\"char__comics-item\" key={i}>\r\n                                {item.name}\r\n                            </Link>\r\n                        )\r\n                    }\r\n                })\r\n            }\r\n            {isComics}\r\n        </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nCharInfo.propTypes = {\r\n    charId: PropTypes.number\r\n}\r\n\r\nexport default CharInfo;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n        \r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\"\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <ErrorBoundary>\r\n                    <CharInfo charId={selectedChar}/>\r\n                </ErrorBoundary>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;"],"sourceRoot":""}